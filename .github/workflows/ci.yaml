name: Release Asset Check

on:
  workflow_dispatch:
    inputs:
      tagName:
        description: 'Tag Name to Process (leave empty for latest)'
        required: false
        default: ''
  release:
    types: [created, published]

jobs:
  check-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: |
          if ! command -v gh &> /dev/null
          then
            echo "GitHub CLI not found, installing..."
            sudo apt update
            sudo apt install -y gh
          else
            echo "GitHub CLI is already installed."
          fi
          gh --version

      - name: Determine the Tag Name
        id: get-tag-name
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.tagName }}" != "" ]]; then
            echo "Using manually provided tag name: ${{ github.event.inputs.tagName }}"
            echo "tag_name=${{ github.event.inputs.tagName }}" >> $GITHUB_ENV
          else
            echo "Determining the latest release tag..."
            release_info=$(gh release view --json tagName -q .tagName)
            echo "tag_name=$release_info" >> $GITHUB_ENV
          fi

      - name: Download the release asset
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Read the tag name from the environment variable
          asset_name="${{ env.tag_name }}.zip"
          echo "Looking for asset: $asset_name"
          
          # Ensure no stale asset file is present
          rm -f "$asset_name"

          # Use GitHub CLI to download the asset
          gh release download "${{ env.tag_name }}" \
            --pattern "$asset_name" \
            --dir .

          # List files to verify the correct asset is downloaded
          echo "Downloaded files:"
          ls -l

      - name: Extract the archive
        run: |
          asset_name="${{ env.tag_name }}.zip"
          unzip "$asset_name" -d extracted

          # List contents to ensure cache is not affecting the content
          echo "Contents of extracted directory:"
          ls -lR extracted/

      - name: Check for the expected directory structure
        run: |
          # Expected root directory inside the extracted folder
          expected_dir="extracted/${{ env.tag_name }}"
          echo "Checking for directory: $expected_dir"
          
          # Check if the extracted root directory exists
          if [ ! -d "$expected_dir" ]; then
            echo "Directory $expected_dir does not exist."
            exit 1
          fi

          # Check for the 'include' directory with the 'boost' subdirectory
          if [ ! -d "$expected_dir/include/boost" ]; then
            echo "Directory $expected_dir/include/boost does not exist."
            exit 1
          fi

          # Check for the 'libs' directory with expected architecture subdirectories
          for arch in arm64-v8a armeabi-v7a x86 x86_64; do
            if [ ! -d "$expected_dir/libs/$arch" ]; then
              echo "Directory $expected_dir/libs/$arch does not exist."
              exit 1
            fi
          done

          echo "All specified directories exist."

                  # extracted/{release_name}
        # include
        #   boost/
        # libs
        #   arm64-v8a/
        #   armeabi-v7a/
        #   x86/
        #   x86_64/



      # - name: Check for the specific file
      #   run: |
      #     # Update this path to the expected location of your file within the extracted directory
      #     if [ -f "extracted/path/to/your/file" ]; then
      #       echo "File exists."
      #     else
      #       echo "File does not exist."
      #       exit 1
      #     fi

